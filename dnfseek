#!/bin/bash
# ---------- SAFETY CHECKS ----------
command -v fzf >/dev/null 2>&1 || { echo "‚ùå fzf not installed. Please run: sudo dnf install -y fzf"; exit 1; }
command -v dnf >/dev/null 2>&1 || { echo "‚ùå dnf not found. This script is for Fedora-based systems."; exit 1; }

# ---------- TEMP FILES FOR CACHING ----------
installed_cache=$(mktemp)
available_cache=$(mktemp)

cleanup() {
  rm -f "$installed_cache" "$available_cache"
  echo -e "\nüßπ Cache cleared. Exiting..."
}
trap cleanup EXIT

echo "‚è≥ Fetching package lists (this may take a few seconds)..."
dnf list --installed 2>/dev/null | awk 'NR>2 {print $1}' > "$installed_cache"
dnf -y --refresh --setopt=gpgcheck=1 --setopt=repo_gpgcheck=1 list --available 2>/dev/null | awk 'NR>2 {print $1}' > "$available_cache"

# ---------- MAIN LOOP ----------
while true; do
  # ===== MAIN MENU =====
  mode=$(printf "üîé Search all packages\nüìó Show installed packages\n‚ùå Quit" | \
    fzf --prompt="Main Menu: " \
        --header=$'‚¨Ü‚¨á Navigate | ‚èé Select | Ctrl-C Quit' \
        --height=20% \
        --reverse)

  case "$mode" in
    "‚ùå Quit" | "") exit 0 ;;
    "üìó Show installed packages") filter_installed=true ;;
    "üîé Search all packages") filter_installed=false ;;
  esac

  # ===== PACKAGE LIST =====
  if [ "$filter_installed" = true ]; then
    package_list=$(
      awk '{print "\033[32m" $1 " ‚úÖ\033[0m"}' "$installed_cache"
    )
  else
    # merge installed + available (color installed green)
    package_list=$(
      {
        awk '{print "\033[32m" $1 " ‚úÖ\033[0m"}' "$installed_cache"
        grep -vxFf "$installed_cache" "$available_cache"
      } | sort -u
    )
  fi

  # ===== PACKAGE SELECTION =====
  selected_pkg=$(echo "$package_list" | \
    fzf --ansi \
        --prompt="üîé Search package: " \
        --header=$'‚¨Ü‚¨á Navigate | ‚èé Select | Ctrl-C Back\n\033[32mGreen = Installed ‚úÖ\033[0m | White = Available' \
        --height=40% \
        --reverse \
        --preview 'pkg=$(echo {} | sed "s/ ‚úÖ//" | sed "s/\x1b\[[0-9;]*m//g"); dnf info "$pkg" 2>/dev/null | grep -E "^(Name|Summary|Version|Release|Size|URL)"' \
        --preview-window=down:wrap:60%)

  [ -z "$selected_pkg" ] && continue

  # Clean ANSI colors and extra symbols
  clean_pkg=$(echo "$selected_pkg" | sed 's/ ‚úÖ//' | sed 's/\x1b\[[0-9;]*m//g')

  # ===== DETECT PACKAGE STATUS =====
  if dnf list installed "$clean_pkg" 2>/dev/null | grep -q "^$clean_pkg\."; then
    status="installed"
  else
    status="available"
  fi

  # ===== ACTION MENU =====
  if [ "$status" = "installed" ]; then
    action=$(printf "üì¶ Reinstall\nüóëÔ∏è Remove\n‚¨ÜÔ∏è Update\nüß© Dependencies\n‚Ü©Ô∏è Back" | \
      fzf --prompt="Choose action: " \
          --header="Selected (installed): $clean_pkg" \
          --height=20% \
          --reverse)
  else
    action=$(printf "üì¶ Install\nüß© Dependencies\n‚Ü©Ô∏è Back" | \
      fzf --prompt="Choose action: " \
          --header="Selected (available): $clean_pkg" \
          --height=20% \
          --reverse)
  fi

  case "$action" in
    "üì¶ Install")   sudo dnf install -y "$clean_pkg" ;;
    "üì¶ Reinstall") sudo dnf reinstall -y "$clean_pkg" ;;
    "üóëÔ∏è Remove")    sudo dnf remove -y "$clean_pkg" ;;
    "‚¨ÜÔ∏è Update")    sudo dnf upgrade -y "$clean_pkg" ;;
    "üß© Dependencies") 
      clear
      echo "üîç Dependencies for $clean_pkg:"
      dnf repoquery --requires "$clean_pkg" 2>/dev/null | sed 's/^/   ‚Ä¢ /'
      echo -e "\nPress Enter to go back..."
      read ;;
    "‚Ü©Ô∏è Back" | "") continue ;;
  esac
done
